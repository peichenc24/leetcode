/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    private List<Integer> res = new ArrayList<Integer>();

    public List<Integer> largestValues(TreeNode root) {
        if(root==null){
            return res;
        }else{
            res.add(root.val);
            dfs(root.left, 1);
            dfs(root.right, 1);

            return res;
        }

    }

    public void dfs(TreeNode root, int depth){
        if(root == null){
            return;
        }
        if(res.size() < depth+1){
            res.add(root.val);
        }else if(res.size() >= depth+1){
            if(res.get(depth) < root.val){
                res.set(depth, root.val);
            }
        }
        dfs(root.left, depth+1);
        dfs(root.right, depth+1);
    }
}
